#!/usr/bin/bash

log_info() {
  local color_normal color_warning
  color_normal=$(tput sgr0)
  color_warning=$(tput setaf 2)  # green
  if [[ -n $DIRENV_LOG_FORMAT ]]; then
    local msg=$*
    printf "${color_warning}${DIRENV_LOG_FORMAT}${color_normal}\n" "$msg" >&2
  fi
}

log_warning() {
  local color_normal color_warning
  color_normal=$(tput sgr0)
  color_warning=$(tput setaf 3)  # yellow
  if [[ -n $DIRENV_LOG_FORMAT ]]; then
    local msg=$*
    printf "${color_warning}${DIRENV_LOG_FORMAT}${color_normal}\n" "$msg" >&2
  fi
}

# --- Python Virtual Environment ---
layout_pyvenv() {
  local bin_path activation_script
  bin_path=".venv/bin"
  activation_script="$bin_path/activate"
  if [[ ! -f "$activation_script" ]]; then
    log_info "Create new python virtual environment."

    python -m venv --prompt "$(basename "$(realpath .)")" .venv

    if [[ ! -f "$activation_script" ]]; then
      log_error "Failed to create new python virtual environment."
      exit 2
    fi

    log_info "Update virtual environment."
    "$bin_path/python" -m pip install -U pip
  fi

  source "$activation_script"
}

# PDM
layout_pdm() {
  if ! type pdm &>/dev/null; then
    log_error "PDM is not installed."
    exit 2
  fi

  eval "$(pdm venv activate)"
}

# Poetry
layout_poetry() {
  if ! has poetry; then
    log_error "\`poetry\` command not found. Install \`poetry\` first."
    exit 2
  fi

  if [[ ! -f pyproject.toml ]]; then
    log_error "No pyproject.toml found. Use \`poetry new\` or \`poetry init\` to create one first."
    exit 2
  fi

  local VENV
  VENV=$(poetry env info --path)
  if [[ -z "$VENV" || ! -d "$VENV/bin" ]]; then
    log_error "No poetry virtual environment found!"
    log_warning "Automatically create virtual environment in \`.venv\`."

    # Create venv by python's venv inside the project dir and use project name for the prompt
    python -m venv --prompt "$(poetry version | cut -d' ' -f1)" .venv

    # Check if new venv is created
    VENV=$(poetry env info --path)
    if [[ -z "$VENV" || ! -d "$VENV/bin" ]]; then
      log_error "Failed to create new virtual environment for poetry."
      exit 2
    fi

    log_info "Successfully created new virtual environment in ${VENV}."
    log_info "Manually install packages defined in pyproject.toml by \`poetry install\`."
  fi

  export VIRTUAL_ENV="$VENV"
  export POETRY_ACTIVE=1
  PATH_add "$VENV/bin"

  log_status "enabled poetry environment."
}

# vim: ft=bash
